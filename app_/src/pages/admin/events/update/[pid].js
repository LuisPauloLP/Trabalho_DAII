import NavAdmin from '@/components/NavAdmin'
import MenuEvents from '@/components/MenuEvents';
import Head from 'next/head'
import Link from 'next/link'
import { useEffect, useState } from 'react';
import Axios from 'axios';
import { useRouter } from 'next/router';

export default function updateevent() {
  
  const API_URL = "http://localhost:3030/api/events/"

  const [event, setEvent] = useState({
    event_id: "",
    event_title: "",
    event_description: "",
    event_comments: "",
    event_date: "",
    event_location: "",
    event_time: "",
    event_status: "",
    event_create_date: ""
  });

  const router = useRouter();
  const [pid] = useState(router.query.pid);

  const [message, setMensage] = useState({ message:"", status:""});

  const optionsStatus = [
    {value: '', text: '-- Selecione um estado --'},
    {value: 'true', text: 'Ativo'},
    {value: 'false', text: 'Inativo'},
  ];


     useEffect(() => {
        const getEvent = async () => {
          try {
            const response = await Axios.get(API_URL + pid);
            setMensage( { message: response.data.message , status: "ok"} ); 
            setEvent( response.data.foundedEvent );
          } catch (error) {
            console.error('Erro ao buscar os eventos:', error);
            setMensage( { message: "Erro ao buscar os Eventos!", status: "error"} );
          }
        };
    
        getEvent();
    
      }, []);
      
      const handleChange = (event) => {
        const { name, value } = event.target;
        setEvent({
          ...event,
          [name]: value
        });
      };

      const handleUpdateEvent = async () => {
        try {
          // Cria um novo objeto contendo apenas os dados que precisam ser enviados
          const eventData = {
            event_id: event.event_id,
            event_title: event.event_title,
            event_description: event.event_description,
            event_comments: event.event_comments,
            event_date: event.event_date,
            event_location: event.event_location,
            event_time: event.event_time,
            event_status: event.event_status,
            event_create_date: event.event_create_date
          };
      
          // Envia os dados do evento limpos para a API
          const response = await Axios.put(API_URL + pid, { event: eventData });
          setMensage({ message: response.data.message, status: "ok" });
        } catch (error) {
          console.error('Erro ao alterar o Evento:', error);
          setMensage({ message: "Erro ao alterar o Evento!", status: "error" });
        }
      };
      
      // const handleUpdateEvent = async () => {
      //   try {
      //     // Envia apenas os dados do evento e não o objeto completo
      //     const response = await Axios.put(API_URL + pid, { event });
      //     setMensage({ message: response.data.message, status: "ok" });
      //   } catch (error) {
      //     console.error('Erro ao alterar o Evento:', error);
      //     setMensage( { message: "Erro ao alterar o Evento!", status: "error"} );
      //   }
      // };
      



  return (
    <>
      <Head>
        <title>APP-BC</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div>
        <NavAdmin />
        <MenuEvents />
        { 
          message.status==="" ? "" : 
          message.status==="ok" ? <div className='alert alert-success' role='alert'> { message.message } <Link className='alert-link' href='/admin/events'>Voltar</Link></div> : 
          <div className='alert alert-danger' role='alert'> { message.message } <Link className='alert-link' href='/admin/events'>Voltar</Link></div>
        }
      </div>
  
      <div>
        <div className="container">
            <div className="row border-bottom">
                <h3> Edição de Evento </h3>
            
                <form method="POST">
                <div className="form-group">
                    <label className="form-label" htmlFor="event_title">Título</label>
                    <input type="text" id="event_title" name="event_title" className="form-control" value={event.event_title} onChange={handleChange}/>
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="event_description">Descrição</label>
                    <input type="text" id="event_description" name="event_description" className="form-control" value={event.event_description} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="event_comments">Comentários</label>
                    <input type="text" id="event_comments" name="event_comments" className="form-control" value={event.event_comments} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="event_date">Data</label>
                    <input type="date" id="event_date" name="event_date" className="form-control" value={event.event_date} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="event_location">Localização</label>
                    <input type="text" id="event_location" name="event_location" className="form-control" value={event.event_location} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="event_time">Hora</label>
                    <input type="time" id="event_time" name="event_time" className="form-control" value={event.event_time} onChange={handleChange} />
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="event_status">Status</label>
                    <select className="form-select" id="event_status" name="event_status" value={event.event_status} onChange={handleChange}>
                      {optionsStatus.map(option => (
                        <option key={option.value} value={option.value}>
                          {option.text}
                        </option>
                      ))}
                    </select>
                </div>
                <div className="form-group">
                    <label className="form-label" htmlFor="event_create_date">Data de Criação</label>
                    <input type="text" id="event_create_date" name="event_create_date" className="form-control" value={ event.event_create_date } readOnly />
                </div> 
                <div className="form-group p-2">
                    <button className="btn btn-outline-success" type="button" onClick={handleUpdateEvent} >Salvar</button>
                    <Link className="btn btn-outline-info" href="/admin/events">Voltar</Link>
                </div>
                </form>
            </div>
        </div>
      </div>  
  </>
  )
}
// import NavAdmin from '@/components/NavAdmin';
// import MenuEvents from '@/components/MenuEvents';
// import Head from 'next/head';
// import Link from 'next/link';
// import { useEffect, useState } from 'react';
// import Axios from 'axios';
// import { useRouter } from 'next/router';

// export default function updateevent() {
//   const API_URL = "http://localhost:3030/api/events/";

//   const [event, setEvent] = useState({
//     event_id: "",
//     event_title: "",
//     event_description: "",
//     event_comments: "",
//     event_date: "",
//     event_location: "",
//     event_time: "",
//     event_status: "",
//     event_create_date: ""
//   });

//   const router = useRouter();
//   const { pid } = router.query; // Obter pid diretamente do objeto query

//   const [message, setMessage] = useState({ message: "", status: "" });

//   const optionsStatus = [
//     { value: '', text: '-- Selecione um estado --' },
//     { value: 'true', text: 'Ativo' },
//     { value: 'false', text: 'Inativo' },
//   ];

//   useEffect(() => {
//     if (!pid) return; // Aguarda até que o pid esteja disponível

//     const getEvent = async () => {
//       try {
//         const response = await Axios.get(API_URL + pid);
//         const fetchedEvent = response.data.foundedEvent;

//         // Formate a data para o formato YYYY-MM-DD
//         if (fetchedEvent.event_date) {
//           fetchedEvent.event_date = new Date(fetchedEvent.event_date).toISOString().split("T")[0];
//         }

//         setMessage({ message: response.data.message, status: "ok" });
//         setEvent(fetchedEvent);
//       } catch (error) {
//         console.error('Erro ao buscar o evento:', error);
//         setMessage({ message: "Erro ao buscar o evento!", status: "error" });
//       }
//     };

//     getEvent();
//   }, [pid]);

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setEvent((prevEvent) => ({
//       ...prevEvent,
//       [name]: value,
//     }));
//   };

//   const handleUpdateEvent = async () => {
//     try {
//       // Limpe os dados para enviar apenas os campos relevantes
//       const cleanEvent = {
//         event_title: event.event_title,
//         event_description: event.event_description,
//         event_comments: event.event_comments,
//         event_date: event.event_date,
//         event_location: event.event_location,
//         event_time: event.event_time,
//         event_status: event.event_status,
//       };

//       const response = await Axios.put(API_URL + pid, cleanEvent);
//       setMessage({ message: response.data.message, status: "ok" });
//     } catch (error) {
//       console.error('Erro ao alterar o evento:', error);
//       setMessage({ message: "Erro ao alterar o evento!", status: "error" });
//     }
//   };

//   return (
//     <>
//       <Head>
//         <title>APP-BC</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//       </Head>
//       <div>
//         <NavAdmin />
//         <MenuEvents />
//         {
//           message.status === "" ? "" :
//           message.status === "ok" ?
//             <div className='alert alert-success' role='alert'>
//               {message.message}
//               <Link className='alert-link' href='/admin/events'>Voltar</Link>
//             </div> :
//             <div className='alert alert-danger' role='alert'>
//               {message.message}
//               <Link className='alert-link' href='/admin/events'>Voltar</Link>
//             </div>
//         }
//       </div>

//       <div className="container">
//         <div className="row border-bottom">
//           <h3> Edição de Evento </h3>
//           <form>
//             <div className="form-group">
//               <label className="form-label" htmlFor="event_title">Título</label>
//               <input
//                 type="text"
//                 id="event_title"
//                 name="event_title"
//                 className="form-control"
//                 value={event.event_title}
//                 onChange={handleChange}
//               />
//             </div>
//             <div className="form-group">
//               <label className="form-label" htmlFor="event_description">Descrição</label>
//               <input
//                 type="text"
//                 id="event_description"
//                 name="event_description"
//                 className="form-control"
//                 value={event.event_description}
//                 onChange={handleChange}
//               />
//             </div>
//             <div className="form-group">
//               <label className="form-label" htmlFor="event_comments">Comentários</label>
//               <input
//                 type="text"
//                 id="event_comments"
//                 name="event_comments"
//                 className="form-control"
//                 value={event.event_comments}
//                 onChange={handleChange}
//               />
//             </div>
//             <div className="form-group">
//               <label className="form-label" htmlFor="event_date">Data</label>
//               <input
//                 type="date"
//                 id="event_date"
//                 name="event_date"
//                 className="form-control"
//                 value={event.event_date}
//                 onChange={handleChange}
//               />
//             </div>
//             <div className="form-group">
//               <label className="form-label" htmlFor="event_location">Localização</label>
//               <input
//                 type="text"
//                 id="event_location"
//                 name="event_location"
//                 className="form-control"
//                 value={event.event_location}
//                 onChange={handleChange}
//               />
//             </div>
//             <div className="form-group">
//               <label className="form-label" htmlFor="event_time">Hora</label>
//               <input
//                 type="time"
//                 id="event_time"
//                 name="event_time"
//                 className="form-control"
//                 value={event.event_time}
//                 onChange={handleChange}
//               />
//             </div>
//             <div className="form-group">
//               <label className="form-label" htmlFor="event_status">Status</label>
//               <select
//                 className="form-select"
//                 id="event_status"
//                 name="event_status"
//                 value={event.event_status}
//                 onChange={handleChange}
//               >
//                 {optionsStatus.map(option => (
//                   <option key={option.value} value={option.value}>
//                     {option.text}
//                   </option>
//                 ))}
//               </select>
//             </div>
//             <div className="form-group p-2">
//               <button
//                 className="btn btn-outline-success"
//                 type="button"
//                 onClick={handleUpdateEvent}
//               >
//                 Salvar
//               </button>
//               <Link className="btn btn-outline-info" href="/admin/events">Voltar</Link>
//             </div>
//           </form>
//         </div>
//       </div>
//     </>
//   );
// }
